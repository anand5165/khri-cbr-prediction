# -*- coding: utf-8 -*-
"""
Created on Sat Apr  6 11:36:42 2019

@author: Anand
"""


from pandas import DataFrame
import matplotlib.pyplot as plt
from sklearn import linear_model
import statsmodels.api as sm
import pandas as pd
from statsmodels.sandbox.regression.predstd import wls_prediction_std
from sklearn.metrics import mean_squared_error
import math as m

# Reading data file
df = pd.read_csv('cbr.csv')
#Printing datafile as table
print (df)

# Plotting CBR against X
plt.scatter(df['x'], df['CBR Actual'], color='red')
plt.title('CBR Vs x', fontsize=14)
plt.xlabel('x', fontsize=14)
plt.ylabel('CBR ', fontsize=14)
plt.grid(True)
plt.show()
 
# Plotting CBR against y
plt.scatter(df['y'], df['CBR Actual'], color='green')
plt.title('CBR  Vs y', fontsize=14)
plt.xlabel('y', fontsize=14)
plt.ylabel('CBR ', fontsize=14)
plt.grid(True)
plt.show()

# Plotting CBR against z
plt.scatter(df['z'], df['CBR Actual'], color='blue')
plt.title('CBR Vs z', fontsize=14)
plt.xlabel('z', fontsize=14)
plt.ylabel('CBR ', fontsize=14)
plt.grid(True)
plt.show()

# Integrating Y =(x,y,z)
# Y = C + C1 x + C2 y + C3 z
X = df[['x','y','z']] # here we have 3 variables for multiple regression. 
Y = df['CBR Actual']
 
# With sklearn Multivariate regression
regr = linear_model.LinearRegression()
regr.fit(X, Y)

# Output

print('Intercept: \n', regr.intercept_) # Value of constant C

print('Coefficients: \n', regr.coef_) # Valve of coefficient C1, C2, C3

# Prediction with sklearn
# Vales to predict CBR
New_x = 2.75 # Test value
New_y = 5.3 # Test value
New_z = 5.6 # Test value

print ('Predicted CBR: \n', regr.predict([[New_x ,New_y ,New_z]]))


# With statsmodels 
# Statistical info generated by statsmodels
X = sm.add_constant(X) # adding a constant
 
model = sm.OLS(Y, X).fit()
predictions = model.predict(X) 
 
print_model = model.summary()
print(print_model)
print('Parameters: ', model.params) # Give C, C1, C2, C3
print('R2: ', model.rsquared) # Give R square valve
print('Predicted values: ', model.predict()) # Give predicted values

# Finding mean square error
mse = mean_squared_error(predictions, df['CBR Actual'])
rmse = m.sqrt(mse)
print('Mean Square error: ', mse) 
print('Root mean square error: ', rmse) 


# Plotting predicted and actual valves

plt.plot(df['Slno'], df['CBR Actual'], color='blue')
plt.plot(df['Slno'], predictions, color='red')
plt.title('Actual CBR and Predicted CBR', fontsize=14)
plt.xlabel('', fontsize=14)
plt.ylabel('CBR ', fontsize=14)
plt.grid(True)
plt.show()




